diff --git a/lib/scimgateway.js b/lib/scimgateway.js
index b1a3e96cefbbc427e5ffbce6c76bf90783ffcdbc..0c516e4d43cc0451e26a80cfd1efe59a0af683d6 100644
--- a/lib/scimgateway.js
+++ b/lib/scimgateway.js
@@ -348,14 +348,20 @@ const ScimGateway = function () {
     const [authType, authToken] = (ctx.request.header.authorization || '').split(' ') // [0] = 'Basic' or 'Bearer'
     if (authType === 'Basic') [userName] = (Buffer.from(authToken, 'base64').toString() || '').split(':')
     if (!userName && authType === 'Bearer') userName = 'token'
+    const redact_req = ctx.request.body && Object.keys(ctx.request.body).length && config.log.loglevel.file !== 'debug';
+    const sanitized_req = redact_req && (ctx.response.status < 299 || ctx.response.status === 404) ? '**redacted**' : JSON.stringify(ctx.request.body);
     if (ctx.response.status < 200 || ctx.response.status > 299) {
       if (ctx.response.status === 401 || ctx.response.status === 403) { // don't reveal original SCIM error message details related to access denied (e.g. using Auth PassThrough and customErrCode)
         ctx.response.set('Content-Type', 'application/json; charset=utf-8')
         ctx.response.body = { error: 'Access denied' }
         res.body = ctx.response.body
       }
-      logger.error(`${gwName}[${pluginName}] ${ellapsed} ${ctx.request.ip} ${userName} ${ctx.request.method} ${ctx.request.href} Inbound = ${JSON.stringify(ctx.request.body)} Outbound = ${JSON.stringify(res)}${(config.log.loglevel.file === 'debug' && ctx.request.url !== '/ping') ? '\n' : ''}`)
-    } else logger.info(`${gwName}[${pluginName}] ${ellapsed} ${ctx.request.ip} ${userName} ${ctx.request.method} ${ctx.request.href} Inbound = ${JSON.stringify(ctx.request.body)} Outbound = ${JSON.stringify(res)}${(config.log.loglevel.file === 'debug' && ctx.request.url !== '/ping') ? '\n' : ''}`)
+      logger.error(`${gwName}[${pluginName}] ${ellapsed} ${ctx.request.ipcli} ${userName} ${ctx.request.method} ${ctx.request.href} Inbound = ${sanitized_req} Outbound = ${JSON.stringify(res)}${(config.log.loglevel.file === 'debug' && ctx.request.url !== '/ping') ? '\n' : ''}`)
+    } else {
+      const redact_res = res.body && Object.keys(res.body).length && config.log.loglevel.file !== 'debug'
+      const sanitized_res = JSON.stringify({ ...res, body: redact_res ? '**redacted**' : res.body });
+      logger.info(`${gwName}[${pluginName}] ${ellapsed} ${ctx.request.ipcli} ${userName} ${ctx.request.method} ${ctx.request.href} Inbound = ${sanitized_req} Outbound = ${sanitized_res}${(config.log.loglevel.file === 'debug' && ctx.request.url !== '/ping') ? '\n' : ''}`)
+    }
     requestCounter += 1 // logged on exit (not win process termination)
     if (ctx.response.body && typeof ctx.response.body === 'object' && ctx.response.status !== 401) ctx.set('Content-Type', 'application/scim+json; charset=utf-8')
   }
@@ -1917,6 +1923,7 @@ const ScimGateway = function () {
         server = http.createServer(app.callback()).listen(config.port)
         logger.info(`${gwName}[${pluginName}] now listening SCIM ${config.scim.version} on port ${config.port}...${config.stream.subscriber.enabled ? '' : '\n'}`)
       }
+      this.server = server;
     }
   }
 
