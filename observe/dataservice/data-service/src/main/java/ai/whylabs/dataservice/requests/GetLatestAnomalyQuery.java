package ai.whylabs.dataservice.requests;

import com.fasterxml.jackson.annotation.JsonPropertyDescription;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.List;
import javax.persistence.ElementCollection;
import lombok.Data;
import lombok.experimental.FieldNameConstants;
import org.joda.time.Interval;

@FieldNameConstants
@Data
public class GetLatestAnomalyQuery {
  @JsonPropertyDescription("Required, orgId")
  @Schema(required = true)
  private String orgId;

  @JsonPropertyDescription("Required, datasetIds")
  @ElementCollection
  @Schema(required = true)
  private List<String> datasetIds;

  @JsonPropertyDescription("Required, list of segments to search for")
  @ElementCollection
  @Schema(required = true)
  //  TODO: segment filters should not be required for anomaly queries - it's important to be able
  // to get anomaly counts across all segments (including overall)
  private List<String> segments;

  @ElementCollection private List<String> analyzerIds;

  @JsonPropertyDescription("Filter by monitor ids")
  @ElementCollection
  private List<String> monitorIds;

  @JsonPropertyDescription("Filter by column names")
  @ElementCollection
  private List<String> columnNames;

  @JsonPropertyDescription(
      "Required, return anomalies within this ISO-8601 time period,\ninclusive of start and exclusive of end point.\ne.g. \"2022-07-01T00:00:00.000Z/P30D\" or \"2022-07-01T00:00:00.000Z/2022-07-01T00:00:00.000Z\"")
  @Schema(required = true, type = "string")
  private Interval interval; //  ISO 8601 formatted interval

  @JsonPropertyDescription("Read analysis generated by the PG backed monitors")
  private boolean readPgMonitor = false;
}
