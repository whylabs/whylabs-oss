package ai.whylabs.dataservice.requests;

import ai.whylabs.dataservice.enums.DataGranularity;
import ai.whylabs.dataservice.enums.GranularityInclusion;
import ai.whylabs.dataservice.enums.ParentChildScope;
import ai.whylabs.dataservice.enums.SortOrder;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonPropertyDescription;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.List;
import javax.persistence.ElementCollection;
import lombok.Data;
import lombok.experimental.FieldNameConstants;
import org.joda.time.Interval;

@FieldNameConstants
@Data
public class GetAlertsOverTimeRequest {
  @Schema(required = true)
  private String orgId;

  @JsonPropertyDescription("Required, datasetIds")
  @ElementCollection
  @Schema(required = true)
  private List<String> datasetIds;

  @JsonInclude(JsonInclude.Include.NON_NULL)
  @Schema(required = true)
  private DataGranularity granularity = DataGranularity.hourly;

  @JsonPropertyDescription("Optional, list of segments to search for")
  @ElementCollection
  // TODO: segment filter should not be required when filtering anomalies
  private List<String> segments;

  @ElementCollection
  @JsonPropertyDescription("Optional, list of runIds to search for")
  private List<String> runIds;

  @ElementCollection
  @JsonPropertyDescription("Optional, list of analyzerIds to search for")
  private List<String> analyzerIds;

  @ElementCollection
  @JsonPropertyDescription("Optional, list of monitorIds to search for")
  private List<String> monitorIds;

  @ElementCollection
  @JsonPropertyDescription("Optional, list of columnNames to search for")
  private List<String> columnNames;

  @JsonPropertyDescription(
      "Required, return anomalies within this ISO-8601 time period,\ninclusive of start and exclusive of end point.\ne.g. \"2022-07-01T00:00:00.000Z/P30D\" or \"2022-07-01T00:00:00.000Z/2022-07-01T00:00:00.000Z\"")
  @Schema(required = true, type = "string")
  private Interval interval; //  ISO 8601 formatted interval

  @Schema(required = false)
  @JsonPropertyDescription("Order, (desc, asc). Default asc")
  private SortOrder order = SortOrder.asc;

  @JsonPropertyDescription("Query adhoc generated results (stored separately)")
  private Boolean adhoc = false;

  @JsonPropertyDescription(
      "Analysis can be marked as unhelpful. Flag to indicate whether or not to include unhelpful anomalies in the counts")
  private Boolean includeUnhelpful = false;

  @JsonPropertyDescription(
      "Analysis can't be rolled up, so one generally wants to look at either analysis at the bucket level or the individual level")
  @Schema(required = false)
  private GranularityInclusion granularityInclusion = GranularityInclusion.BOTH;

  @JsonPropertyDescription(
      "Optional filter to query for just parent analyzers, just child analyzers, or both")
  @Schema(required = false)
  private ParentChildScope parentChildScope = ParentChildScope.BOTH;

  @JsonPropertyDescription("Read analysis generated by the PG backed monitors")
  private boolean readPgMonitor = false;
}
