package ai.whylabs.dataservice.services;

import static ai.whylabs.druid.whylogs.metadata.BinMetadataEnforcer.MAPPER;

import ai.whylabs.dataservice.streaming.AuditRow;
import ai.whylabs.druid.whylogs.metadata.BinMetadata;
import ai.whylabs.ingestion.S3ClientFactory;
import com.amazonaws.services.s3.AmazonS3;
import com.google.common.annotations.VisibleForTesting;
import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import lombok.extern.slf4j.Slf4j;
import lombok.val;
import org.apache.commons.io.IOUtils;

@Slf4j
public class MetadataSvc {

  public static final String JSON_EXTENSION = ".json";

  private final S3ClientFactory s3ClientFactory;

  public MetadataSvc(AmazonS3 s3) {
    this.s3ClientFactory = new S3ClientFactory(s3);
  }

  AuditRow fetchMetadata(String path) {
    val bin = fetchBinMetadata(path);
    if (bin != null) {
      return AuditRow.builder()
          .filePath(path)
          .orgId(bin.getOrgId())
          .datasetId(bin.getDatasetId())
          .datasetTs(bin.getDatasetTimestamp())
          .referenceId(bin.getId())
          .build();
    }
    return null;
  }

  /**
   * Given a profile URI, fetch JSON metadata supplied to REST api when the profile was uploaded.
   * Metadata file has same name as original profile, with extension replace with .json. Can handle
   * S3: in production, or file: URIs for testing.
   */
  @VisibleForTesting
  BinMetadata fetchBinMetadata(String path) {
    try (InputStream is = openMetadataStream(URI.create(path))) {
      if (is != null) {
        return MAPPER.readValue(IOUtils.toString(is, StandardCharsets.UTF_8), BinMetadata.class);
      }
    } catch (IOException e) {
      log.trace("fetchMetadata \"{}\" - {}", path, e.getMessage());
      return null;
    }
    return null;
  }

  InputStream openMetadataStream(URI uri) throws IOException {
    InputStream is = null;
    String metadataPath = uri.toString();
    // replace extension with .json
    metadataPath = metadataPath.substring(0, metadataPath.lastIndexOf(".")) + JSON_EXTENSION;
    switch (uri.getScheme()) {
      case "s3":
        val S3Obj = s3ClientFactory.get(metadataPath);
        if (S3Obj != null) {
          is = S3Obj.getContentStreamSmallBuffer();
        }
        break;

      case "file":
        // file: scheme generated by Class.getResource() in unit tests
        val path = Paths.get(URI.create(metadataPath));
        is = Files.newInputStream(path);
        break;
    }
    return is;
  }
}
