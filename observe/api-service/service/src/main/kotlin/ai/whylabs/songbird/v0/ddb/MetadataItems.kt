package ai.whylabs.songbird.v0.ddb

import ai.whylabs.songbird.util.DocUtils
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBDocument
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBIgnore
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBIndexHashKey
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBIndexRangeKey
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapperFieldModel.DynamoDBAttributeType
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBRangeKey
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTypeConvertedEnum
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTyped
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBVersionAttribute
import io.swagger.v3.oas.annotations.media.Schema
import java.util.Date
import java.util.UUID

@DynamoDBTypeConvertedEnum
@Schema(example = DocUtils.ExampleSubscriptionTier)
enum class SubscriptionTier {
    FREE,
    PAID,
    AWS_MARKETPLACE,
    SUBSCRIPTION,
}

@DynamoDBTypeConvertedEnum
enum class SubscriptionType {
    UNKNOWN,
    AZURE_MARKETPLACE,
    STRIPE,
}

@DynamoDBTable(tableName = "IGNORE_ME")
open class TypedItem(
    @DynamoDBRangeKey(attributeName = SecondaryKey)
    var type: String = "",
)

@DynamoDBTable(tableName = "See ai.whylabs.songbird.v0.ddb.MapperFactory")
data class SessionItem(
    var sessionId: String = PlaceHolder,
    var expirationId: String = PlaceHolder,

    @DynamoDBRangeKey(attributeName = "sk")
    @DynamoDBIndexHashKey(globalSecondaryIndexName = Index)
    var type: String = Type, // should be SESSION

    var orgId: String = PlaceHolder,
    var modelId: String = PlaceHolder,
    var userId: String = "session-user-${UUID.randomUUID()}",
    // This is going to be some aut generated string generated by the client. Since we don't control
    // it we can't make it the primary key, but it can still be used to correlate sessions with users.
    var creationUserId: String = PlaceHolder,

    var claimedByOrg: String? = null,

    @DynamoDBIndexRangeKey(attributeName = "creation_time", globalSecondaryIndexName = Index)
    var creation_time: Date = Date(),
) {
    companion object {
        const val Type = SessionPrefix
        const val Index = "sessions-index"

        val IdFormat = Regex("session-[a-zA-Z0-9]+")
    }

    /**
     * NOTE make sure to put fields that include other fields into the body with a getter
     * like this. Without this, the value of the that the field has when it is created is
     * the value that is never used. That means that when you item.copy(sessionId = "newOne"),
     * the key wouldn't update.
     */
    @DynamoDBTyped(DynamoDBAttributeType.S)
    @DynamoDBHashKey(attributeName = "pk")
    var key: SessionKey = SessionKey(sessionId)
        get() = SessionKey(sessionId)
}

@DynamoDBTable(tableName = "See ai.whylabs.songbird.v0.ddb.MapperFactory")
data class SessionExpirationItem(
    var id: String = PlaceHolder,

    @DynamoDBRangeKey(attributeName = "sk")
    var type: String = Type, // should be SESSION

    @DynamoDBAttribute(attributeName = "creation_time")
    var creation_time: Date = Date(),

    var ttl: Long? = null,
) {
    companion object {
        const val Type = SessionExpirationPrefix
        const val Index = "session-index"

        val IdFormat = Regex("session_expiration-[a-zA-Z0-9]+")
    }

    @DynamoDBTyped(DynamoDBAttributeType.S)
    @DynamoDBHashKey(attributeName = "pk")
    var key: SessionExpirationKey = SessionExpirationKey(id)
        get() = SessionExpirationKey(id)
}

@DynamoDBDocument
class NotificationRelationshipItem(
    var datasetId: String? = PlaceHolder,
    var itemId: String? = PlaceHolder,
    var itemDisplayName: String? = null,
    @field:Schema(nullable = false)
    var type: NotificationRelationshipType? = NotificationRelationshipType.MONITOR,
)

@DynamoDBTypeConvertedEnum
enum class NotificationRelationshipType {
    MONITOR,
}

@DynamoDBTypeConvertedEnum
enum class MarketplaceDimensions(val limitValue: Int) {
    FREE(1),
    MODELS_2(2),
    MODELS_3(3),
    MODELS_4(4),
    MODELS_5(5),
    BY_QUANTITY(0),
    ENTERPRISE(Int.MAX_VALUE) // Effectively inf. We don't enforce these yet
}

@DynamoDBTable(tableName = "See ai.whylabs.songbird.v0.ddb.MapperFactory")
data class SubscriptionMetadataItem(
    @DynamoDBTyped(DynamoDBAttributeType.S)
    @DynamoDBHashKey(attributeName = PrimaryKey)
    var key: SubscriptionKey = SubscriptionKey(PlaceHolder),

    @DynamoDBAttribute(attributeName = "org_id")
    var orgId: String = PlaceHolder,

    @DynamoDBAttribute(attributeName = "subscription_type")
    var subscriptionType: SubscriptionType = SubscriptionType.UNKNOWN,

    @DynamoDBAttribute(attributeName = "subscription_id")
    @DynamoDBIndexHashKey(globalSecondaryIndexName = Index)
    var subscriptionId: String = PlaceHolder,

    @DynamoDBAttribute(attributeName = "created_by")
    var createdBy: String? = PlaceHolder,

    @DynamoDBAttribute(attributeName = "expiration_time")
    var expirationTime: Date? = null,

    @DynamoDBAttribute(attributeName = "expiration_update_time")
    var expirationUpdateTime: Date? = null,
) : TypedItem("SUBSCRIPTION"), DynamoDBItem<SubscriptionMetadataItem, ItemId.String> {
    companion object {
        const val Index = "subscription-index"
    }
    @DynamoDBIgnore
    override fun getPrimaryKey() = key

    @DynamoDBIgnore
    override fun setId(id: String) = this.copy(orgId = id)

    @DynamoDBIgnore
    override fun getId() = ItemId.String(orgId)
}

@DynamoDBTable(tableName = "See ai.whylabs.songbird.v0.ddb.MapperFactory")
data class AWSMarketplaceMetadataItem(
    @DynamoDBRangeKey(attributeName = "sk")
    @DynamoDBIndexHashKey(globalSecondaryIndexName = OrganizationItem.Index)
    var type: String = Type,

    @DynamoDBAttribute(attributeName = "org_id")
    @DynamoDBIndexRangeKey(attributeName = "org_id", globalSecondaryIndexName = OrganizationItem.Index)
    var orgId: String = PlaceHolder,

    @DynamoDBAttribute(attributeName = "aws_marketplace_customer_id")
    var awsMarketplaceCustomerId: String = PlaceHolder,

    @DynamoDBAttribute(attributeName = "aws_marketplace_product_code")
    var awsMarketplaceProductCode: String = PlaceHolder,

    @DynamoDBAttribute(attributeName = "created_by")
    var createdBy: String? = PlaceHolder, // This will be the user id of the person that logged in form the marketplace account first.

    @DynamoDBAttribute(attributeName = "aws_marketplace_dimension")
    var dimension: MarketplaceDimensions = MarketplaceDimensions.FREE,

    @DynamoDBAttribute(attributeName = "expiration_time")
    var expiration_time: Date = Date(),

    @DynamoDBAttribute(attributeName = "expiration_update_time")
    var expiration_update_time: Date? = null,

) : DynamoDBItem<AWSMarketplaceMetadataItem, ItemId.String> {

    companion object {
        const val Type = "AWS_MARKETPLACE"
    }

    @DynamoDBTyped(DynamoDBAttributeType.S)
    @DynamoDBHashKey(attributeName = "pk")
    var key: AWSMarketplaceKey = AWSMarketplaceKey(awsMarketplaceCustomerId)
        get() = AWSMarketplaceKey(awsMarketplaceCustomerId)

    @DynamoDBIgnore
    override fun getPrimaryKey() = key

    @DynamoDBIgnore
    override fun setId(id: String) = this.copy(orgId = id)

    @DynamoDBIgnore
    override fun getId() = ItemId.String(orgId)
}

@DynamoDBTable(tableName = "See ai.whylabs.songbird.v0.ddb.MapperFactory")
data class OrganizationItem(
    @DynamoDBIndexRangeKey(attributeName = "org_id", globalSecondaryIndexName = Index)
    var orgId: String = PlaceHolder,

    @DynamoDBRangeKey(attributeName = "sk")
    @DynamoDBIndexHashKey(globalSecondaryIndexName = Index)
    var type: String = Type, // should be ORGANIZATION

    @DynamoDBAttribute(attributeName = "org_name")
    var name: String = "",

    @DynamoDBAttribute(attributeName = "org_domain")
    var domain: String? = "",

    @DynamoDBAttribute(attributeName = "org_email_domains")
    var emailDomains: String? = null,

    @DynamoDBTypeConvertedEnum
    @DynamoDBAttribute(attributeName = "subscription_tier")
    var subscriptionTier: SubscriptionTier? = null,

    @DynamoDBAttribute(attributeName = "observatory_url")
    var observatoryUrl: String? = "",

    @DynamoDBAttribute(attributeName = "creation_time")
    var creation_time: Date = Date(),

    @DynamoDBAttribute(attributeName = "useCloudFront")
    var useCloudFront: Boolean? = null,

    @DynamoDBAttribute(attributeName = "parent_org_id")
    @DynamoDBIndexHashKey(globalSecondaryIndexName = ManagedOrgIndex)
    var parentOrgId: String? = null,

    @DynamoDBAttribute(attributeName = "storage_bucket_override")
    var storageBucketOverride: String? = null,

    @DynamoDBAttribute(attributeName = "storage_uri_override")
    var storageUriOverride: String? = null,

    @DynamoDBAttribute(attributeName = "is_deleted")
    var deleted: Boolean? = false,

    @DynamoDBAttribute(attributeName = "is_managed_memberships")
    var allowManagedMembershipUpdatesOnly: Boolean? = null

) : DynamoDBItem<OrganizationItem, ItemId.String> {
    companion object {
        const val Index = "orgs-index"
        const val ManagedOrgIndex = "parent-org-index"
        const val Type = "ORGANIZATION"
        val IdFormat = Regex("org-[0-9a-zA-Z]+")
    }

    @DynamoDBTyped(DynamoDBAttributeType.S)
    @DynamoDBHashKey(attributeName = "pk")
    var key: OrgKey = OrgKey(orgId) // organization ID in the format ORG#org-123abcABC
        get() = OrgKey(orgId)

    @DynamoDBIgnore
    override fun getPrimaryKey() = key

    @DynamoDBIgnore
    override fun setId(id: String) = this.copy(orgId = id)

    @DynamoDBIgnore
    override fun getId() = ItemId.String(orgId)
}

interface DynamoDBItem<T : DynamoDBItem<T, IdType>, IdType : ItemId> {
    @DynamoDBIgnore
    fun getPrimaryKey(): BaseKey

    fun setId(id: String): T

    @DynamoDBIgnore
    fun getId(): IdType
}

sealed class ItemId {
    class String(val id: kotlin.String) : ItemId() {
        fun isUnset() = id == PlaceHolder
    }

    object None : ItemId()
}

@DynamoDBTable(tableName = "See ai.whylabs.songbird.v0.ddb.MapperFactory")
data class UserItem(
    var userId: String = PlaceHolder,

    @DynamoDBAttribute(attributeName = "creation_time")
    var creationTime: Date = Date(),

    @DynamoDBAttribute(attributeName = "email")
    @DynamoDBIndexHashKey(globalSecondaryIndexName = "email-index")
    var email: String = PlaceHolder,

    var preferences: String? = null,

    @DynamoDBAttribute(attributeName = "update_time")
    var updateTime: Date = Date(),

    @DynamoDBRangeKey(attributeName = "sk")
    var type: String = "USER",
) : DynamoDBItem<UserItem, ItemId.String> {
    @DynamoDBIgnore
    override fun getPrimaryKey() = key
    override fun setId(id: String) = this.copy(userId = id)

    @DynamoDBIgnore
    override fun getId() = ItemId.String(userId)

    @DynamoDBTyped(DynamoDBAttributeType.S)
    @DynamoDBHashKey(attributeName = "pk")
    var key: UserKey = UserKey(userId)
        get() = UserKey(userId)
}

@DynamoDBTable(tableName = "See ai.whylabs.songbird.v0.ddb.MapperFactory")
data class AccountUserItem(
    @DynamoDBAttribute(attributeName = "user_id")
    var userId: String = PlaceHolder,

    @DynamoDBAttribute(attributeName = "org_id")
    @DynamoDBIndexRangeKey(attributeName = "org_id", globalSecondaryIndexName = OrganizationItem.Index)
    var orgId: String = PlaceHolder,

    @DynamoDBAttribute(attributeName = "external_id")
    var externalId: String? = null,

    @DynamoDBAttribute(attributeName = "creation_time")
    var creationTime: Date = Date(),

    @DynamoDBAttribute(attributeName = "email")
    @DynamoDBIndexHashKey(globalSecondaryIndexName = "email-index")
    var email: String = PlaceHolder,

    @DynamoDBAttribute(attributeName = "user_schema")
    var userSchema: String? = null,

    @DynamoDBAttribute(attributeName = "update_time")
    var updateTime: Date = Date(),

    @DynamoDBAttribute(attributeName = "active")
    @DynamoDBTyped(DynamoDBAttributeType.BOOL)
    var active: Boolean? = true,

    @DynamoDBAttribute(attributeName = "deleted")
    @DynamoDBTyped(DynamoDBAttributeType.BOOL)
    var deleted: Boolean? = false,

    @DynamoDBRangeKey(attributeName = "sk")
    @DynamoDBIndexHashKey(globalSecondaryIndexName = OrganizationItem.Index)
    var type: String = "ACCOUNT_USER",
) : DynamoDBItem<AccountUserItem, ItemId.None> {
    @DynamoDBIgnore
    override fun getPrimaryKey() = key
    override fun setId(id: String) = this.copy(userId = id)

    @DynamoDBIgnore
    override fun getId() = ItemId.None

    @DynamoDBTyped(DynamoDBAttributeType.S)
    @DynamoDBHashKey(attributeName = "pk")
    var key: AccountUserKey = AccountUserKey(userId, orgId)
        get() = AccountUserKey(userId, orgId)
}

@DynamoDBTypeConvertedEnum
@Schema(example = DocUtils.ExampleRole)
// Users can only have one role in an organization. Preference order defines how the role is chosen.
enum class Role(val preferenceOrder: Int) {
    ADMIN(3),
    MEMBER(2), // This maps to User in the UI/graphql
    VIEWER(1)
}

@DynamoDBTable(tableName = "See ai.whylabs.songbird.v0.ddb.MapperFactory")
data class MembershipItem(
    @DynamoDBTyped(DynamoDBAttributeType.S)
    @DynamoDBAttribute(attributeName = "org_id")
    var orgId: String = PlaceHolder,

    var userId: String = PlaceHolder,

    var role: Role = Role.MEMBER,

    var default: Boolean = false,

    @DynamoDBAttribute(attributeName = "creation_time")
    var creationTime: Date = Date(),

    @DynamoDBRangeKey(attributeName = "sk")
    var type: String = "MEMBERSHIP",

) : DynamoDBItem<MembershipItem, ItemId.None> {
    @DynamoDBIgnore
    override fun getPrimaryKey() = key

    companion object {
        const val UsersOrgsIndex = "member-index"
        const val OrgMembersIndex = "org-member-index"
    }

    override fun setId(id: String) = this

    @DynamoDBIgnore
    override fun getId() = ItemId.None

    @DynamoDBTyped(DynamoDBAttributeType.S)
    @DynamoDBHashKey(attributeName = "pk")
    var key: MembershipKey = MembershipKey(orgId, userId)
        get() = MembershipKey(orgId, userId)

    @DynamoDBTyped(DynamoDBAttributeType.S)
    @DynamoDBAttribute(attributeName = "org_membership")
    @DynamoDBIndexHashKey(globalSecondaryIndexName = OrgMembersIndex)
    var orgMember: String = "$MembershipPrefix#$orgId" // Get all of the members of an org
        get() = "$MembershipPrefix#$orgId"

    @DynamoDBTyped(DynamoDBAttributeType.S)
    @DynamoDBAttribute(attributeName = "membership")
    @DynamoDBIndexHashKey(globalSecondaryIndexName = UsersOrgsIndex)
    var membership: String = "$MembershipPrefix#$userId" // Get all of the orgs a user belongs to
        get() = "$MembershipPrefix#$userId"
}

@DynamoDBTable(tableName = "See ai.whylabs.songbird.v0.ddb.MapperFactory")
data class ClaimMembershipItem(
    @DynamoDBTyped(DynamoDBAttributeType.S)
    @DynamoDBAttribute(attributeName = "org_id")
    var orgId: String = PlaceHolder,

    var userId: String = PlaceHolder,

    var role: Role = Role.MEMBER,

    var default: Boolean = false,

    var claims: String = PlaceHolder,

    @DynamoDBAttribute(attributeName = "creation_time")
    var creationTime: Date = Date(),

    @DynamoDBAttribute(attributeName = "update_time")
    var updateTime: Date = Date(),

    @DynamoDBRangeKey(attributeName = "sk")
    var type: String = "CLAIM_MEMBERSHIP",

) : DynamoDBItem<ClaimMembershipItem, ItemId.None> {
    @DynamoDBIgnore
    override fun getPrimaryKey() = key

    companion object {
        const val UsersOrgsIndex = "claim-member-index"
        const val OrgMembersIndex = "claim-org-member-index"
    }

    override fun setId(id: String) = this

    @DynamoDBIgnore
    override fun getId() = ItemId.None

    @DynamoDBTyped(DynamoDBAttributeType.S)
    @DynamoDBHashKey(attributeName = "pk")
    var key: ClaimMembershipKey = ClaimMembershipKey(orgId, userId)
        get() = ClaimMembershipKey(orgId, userId)

    @DynamoDBTyped(DynamoDBAttributeType.S)
    @DynamoDBAttribute(attributeName = "claim_org_membership")
    @DynamoDBIndexHashKey(globalSecondaryIndexName = OrgMembersIndex)
    var claimOrgMember: String = "$ClaimMembershipPrefix#$orgId" // Get all of the claim members of an org
        get() = "$ClaimMembershipPrefix#$orgId"

    @DynamoDBTyped(DynamoDBAttributeType.S)
    @DynamoDBAttribute(attributeName = "claim_membership")
    @DynamoDBIndexHashKey(globalSecondaryIndexName = UsersOrgsIndex)
    var claimMembership: String = "$ClaimMembershipPrefix#$userId" // Get all of the orgs a user belongs to based on claims
        get() = "$ClaimMembershipPrefix#$userId"
}

@DynamoDBTable(tableName = "See ai.whylabs.songbird.v0.ddb.MapperFactory")
data class MonitorConfigV3MetadataItem(
    @DynamoDBTyped(DynamoDBAttributeType.S)
    @DynamoDBHashKey(attributeName = PrimaryKey)
    var key: ModelKey = ModelKey(PlaceHolder, PlaceHolder),

    @DynamoDBAttribute(attributeName = "config_base")
    var configBase: String? = null,

    var analyzers: String? = null,

    var monitors: String? = null,

    @DynamoDBAttribute(attributeName = "update_time")
    var updateTime: Date = Date(),

    @DynamoDBVersionAttribute
    var version: Long? = null,
) : TypedItem("MONITOR_CONFIG_V3") {

    companion object {
        fun create(
            orgId: String,
            modelId: String,
            version: Long? = null,
            base: String? = null,
            analyzers: String? = null,
            monitors: String? = null
        ): MonitorConfigV3MetadataItem {
            return MonitorConfigV3MetadataItem(
                version = version,
                configBase = base,
                analyzers = analyzers,
                monitors = monitors,
                key = ModelKey(orgId, modelId),
            )
        }
    }
}

@DynamoDBTable(tableName = "See ai.whylabs.songbird.v0.ddb.MapperFactory")
data class PolicyConfigurationItem(
    @DynamoDBTyped(DynamoDBAttributeType.S)
    @DynamoDBHashKey(attributeName = PrimaryKey)
    var key: PolicyConfigurationKey = PolicyConfigurationKey(PlaceHolder, PlaceHolder, PlaceHolder),

    @DynamoDBRangeKey(attributeName = SecondaryKey)
    @DynamoDBIndexHashKey(attributeName = SecondaryKey, globalSecondaryIndexName = OrganizationItem.Index)
    var type: String = "POLICY_CONFIG",

    @DynamoDBIndexRangeKey(attributeName = "org_id", globalSecondaryIndexName = OrganizationItem.Index)
    var orgId: String = PlaceHolder,

    @DynamoDBAttribute(attributeName = "dataset_id")
    var datasetId: String = PlaceHolder,

    @DynamoDBAttribute(attributeName = "policy")
    var policy: String = "",

    @DynamoDBAttribute(attributeName = "label")
    var label: String? = null,

    @DynamoDBAttribute(attributeName = "version")
    var version: String = "",

    @DynamoDBAttribute(attributeName = "author")
    var author: String? = null,

    @DynamoDBAttribute(attributeName = "identity")
    var identity: String? = null,

    @DynamoDBAttribute(attributeName = "source")
    var source: String? = null,

    @DynamoDBAttribute(attributeName = "creation_time")
    var creationTime: Date = Date(),

    @DynamoDBAttribute(attributeName = "update_time")
    var updateTime: Date = Date()
) : DynamoDBItem<PolicyConfigurationItem, ItemId.String> {

    @DynamoDBIgnore
    override fun getPrimaryKey() = key

    @DynamoDBIgnore
    override fun setId(id: String) = this

    @DynamoDBIgnore
    override fun getId() = ItemId.String(orgId)
}

@DynamoDBTable(tableName = "See ai.whylabs.songbird.v0.ddb.MapperFactory")
data class AssetMetadataItem(
    @DynamoDBTyped(DynamoDBAttributeType.S)
    @DynamoDBHashKey(attributeName = PrimaryKey)
    var key: AssetMetadataKey = AssetMetadataKey(PlaceHolder, PlaceHolder, PlaceHolder, PlaceHolder),

    @DynamoDBRangeKey(attributeName = SecondaryKey)
    @DynamoDBIndexHashKey(attributeName = SecondaryKey, globalSecondaryIndexName = OrganizationItem.Index)
    var type: String = "ASSET_METADATA",

    @DynamoDBIndexRangeKey(attributeName = "org_id", globalSecondaryIndexName = OrganizationItem.Index)
    var orgId: String = PlaceHolder,

    @DynamoDBAttribute(attributeName = "asset_id")
    var assetId: String = PlaceHolder,

    @DynamoDBIndexHashKey(attributeName = "org_asset_id", globalSecondaryIndexName = OrgAssetIndex)
    var orgAssetId: String = "$orgId#$assetId",

    @DynamoDBAttribute(attributeName = "s3_uri")
    var s3Uri: String = "",

    @DynamoDBAttribute(attributeName = "version")
    var version: String = "",

    // the term "version" is overloaded on our DDB instance, ProvidedConfigMetadataItem defines it as an Integer
    // it's best to have a column dedicated to the version of the assets documents instead
    // it should always be equal to the version column, only stored as an Integer
    @DynamoDBIndexRangeKey(attributeName = "asset_version", globalSecondaryIndexName = OrgAssetIndex)
    var assetVersion: Int? = null,

    @DynamoDBAttribute(attributeName = "tag")
    var tag: String = "default",

    @DynamoDBAttribute(attributeName = "uploaded")
    var uploaded: Boolean? = false,

    @DynamoDBAttribute(attributeName = "author")
    var author: String? = null,

    @DynamoDBAttribute(attributeName = "creation_time")
    var creationTime: Date = Date(),

    @DynamoDBAttribute(attributeName = "update_time")
    var updateTime: Date = Date()
) : DynamoDBItem<AssetMetadataItem, ItemId.String> {

    companion object {
        const val OrgAssetIndex = "org_asset_id-asset_version-index"
    }

    @DynamoDBIgnore
    override fun getPrimaryKey() = key

    @DynamoDBIgnore
    override fun setId(id: String) = this

    @DynamoDBIgnore
    override fun getId() = ItemId.String(orgId)
}

@DynamoDBTypeConvertedEnum
@Schema(example = DocUtils.ExampleNotificationActionType)
enum class ActionType {
    EMAIL,
    SLACK,
    PAGER_DUTY,
    TEAMS,
    WEBHOOK,
    NA // need to add this to ensure we can capture supported types
}

@DynamoDBTable(tableName = "See ai.whylabs.songbird.v0.ddb.MapperFactory")
data class NotificationActionItem(
    @DynamoDBHashKey(attributeName = "id")
    var id: String = PlaceHolder,

    @DynamoDBRangeKey(attributeName = "org_id")
    @DynamoDBIndexHashKey(globalSecondaryIndexName = OrgIndex)
    var orgId: String = PlaceHolder,

    @DynamoDBAttribute(attributeName = "type")
    var type: ActionType? = null,

    var payload: String? = PlaceHolder,

    var author: String = PlaceHolder,

    @DynamoDBTyped(DynamoDBAttributeType.BOOL)
    var deleted: Boolean? = false,

    @DynamoDBTyped(DynamoDBAttributeType.BOOL)
    var enabled: Boolean? = true,

    @DynamoDBVersionAttribute
    var version: Long? = null,

    @DynamoDBAttribute(attributeName = "references")
    var references: List<NotificationRelationshipItem>? = null,

    @DynamoDBAttribute(attributeName = "creation_time")
    var creationTime: Date? = Date(),

    @DynamoDBAttribute(attributeName = "last_update")
    var lastUpdate: Date = Date(),
) {
    companion object {
        const val OrgIndex = "org-index"
        fun create(id: String, orgId: String, type: ActionType, author: String, payload: String): NotificationActionItem {
            return NotificationActionItem(
                id = id,
                orgId = orgId,
                type = type,
                payload = payload,
                author = author
            )
        }
        fun update(id: String, orgId: String, author: String, version: Long, type: ActionType? = null, payload: String? = null, enabled: Boolean? = null, deleted: Boolean? = null): NotificationActionItem {
            return NotificationActionItem(
                id = id,
                orgId = orgId,
                type = type,
                payload = payload,
                author = author,
                deleted = deleted,
                enabled = enabled,
                version = version,
                lastUpdate = Date(),
                creationTime = null // never update this field
            )
        }
    }
}

@DynamoDBTable(tableName = "See ai.whylabs.songbird.v0.ddb.MapperFactory")
data class LogTransactionMetadataItem(
    @DynamoDBTyped(DynamoDBAttributeType.S)
    @DynamoDBHashKey(attributeName = PrimaryKey)
    var key: LogTransactionKey = LogTransactionKey(PlaceHolder),

    @DynamoDBRangeKey(attributeName = SecondaryKey)
    @DynamoDBIndexHashKey(attributeName = SecondaryKey, globalSecondaryIndexName = Index)
    var type: String = Type,

    @DynamoDBIndexRangeKey(attributeName = "org_id", globalSecondaryIndexName = OrganizationItem.Index)
    var orgId: String = PlaceHolder,

    @DynamoDBAttribute(attributeName = "dataset_id")
    var datasetId: String = PlaceHolder,

    @DynamoDBAttribute(attributeName = "transaction_id")
    var transactionId: String = PlaceHolder,

    @DynamoDBAttribute(attributeName = "creation_time")
    var creationTime: Date? = Date(),

    @DynamoDBAttribute(attributeName = "expiration_time")
    var expirationTime: Date? = null,

    @DynamoDBAttribute(attributeName = "aborted")
    var aborted: Boolean? = null,

) : DynamoDBItem<LogTransactionMetadataItem, ItemId.String> {
    companion object {
        const val Index = "orgs-index"
        const val Type = "LOG_TRANSACTION"
    }
    @DynamoDBIgnore
    override fun getPrimaryKey() = key

    @DynamoDBIgnore
    override fun setId(id: String) = this.copy(transactionId = id)

    @DynamoDBIgnore
    override fun getId() = ItemId.String(orgId)
}
