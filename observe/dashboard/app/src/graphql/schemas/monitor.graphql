type MonitorSettingsManagement {
  """
  Update monitor config settings document.
  """
  updateMonitorConfig(datasetId: String!, config: String!): Boolean
  """
  Merge update monitor config settings document with existing config.
  """
  patchMonitorConfig(datasetId: String!, config: String!): Boolean
  """
  Update a single analyzer in the config.
  """
  updateAnalyzer(datasetId: String!, analyzerId: String!, config: String!): Boolean
  """
  Update a single monitor in the config.
  """
  updateMonitor(datasetId: String!, monitorId: String!, config: String!): Boolean
  """
  Deletes a single analyzer
  """
  deleteAnalyzer(datasetId: String!, analyzerId: String!): Boolean
  """
  Deletes a single monitor
  """
  deleteMonitor(datasetId: String!, monitorId: String!): Boolean
}

"""
Information about the adhoc monitor job.
"""
type AdHocMonitorJob {
  """
  ID of the monitor run. Should be used to filter for events related to that run.
  """
  runId: String!
  """
  Number of events that were generated by the ad hoc run
  """
  numEvents: Int!
  """
  List of columns targeted by the ad hoc run based in the features param and analyzer targetMatrix if config is passed.
  If no config is passed by client, we can have either nullish or the same features array from request params,
  so null or undefined does NOT mean that the adhoc has no target.
  """
  columns: [String!]
}

type BackfillAnalyzersJob {
  """
  ID of the backfill job run. Should be used to get job status or cancel that job.
  """
  runId: String!
}

type AdHocMonitorMutations {
  """
  Trigger an adhoc run of the monitor for the specified features.
  Once this returns, the run is complete.
  """
  run(datasetId: String!, features: [String!]!, toTimestamp: Float, fromTimestamp: Float, monitorConfig: String, segments: [[SegmentTagFilter!]!]): AdHocMonitorJob!
}

type BackfillAnalyzersMutations {
  """
  Trigger a backfill job for a dataset within specified interval
  It's an async data-service API, so the returned runID can be used to fetch the job status.
  Will run a comprehensive backfill if no analyzerIds were specified in this call.
  """
  triggerBackfill(datasetId: String!, analyzerIds: [String!], toTimestamp: Float!, fromTimestamp: Float!): BackfillAnalyzersJob!

  """
  Cancel a backfill job by runID
  """
  cancelJob(runId: String!): BackfillJobStatus!
}

extend type Mutation {
  """
  Manage monitor config settings
  """
  monitorSettings: MonitorSettingsManagement @auth(permissions: [MANAGE_MONITORS])

  """
  Manage adhoc monitor runs
  """
  adHocMonitor: AdHocMonitorMutations @auth(permissions: [MANAGE_MONITORS])

  """
  Manage monitor backfill runs
  """
  backfillAnalyzers: BackfillAnalyzersMutations @auth(permissions: [MANAGE_MONITORS])
}

enum BackfillJobStatus {
  Pending
  Planning
  Executing
  Successful
  WritingResults
  Failed
  Canceled
  Unknown
}

enum JobStatus {
  InProgress
  Failed
  Succeeded
}

type MonitorCoverage {
  category: AlertCategory!
  """
  Percentage of datasets covered by this category of monitors
  """
  coverage: Float!
  """
  List of datasets covered by this category of monitors
  """
  coveredDatasets: [String!]!
}

type BackfillJobInfo {
  status: BackfillJobStatus!
  progress: Float!,
  monitorsList: [String!]
  duration: DateRange
  columns: Int!
  segments: Int!
  runId: String!
  datasetId: String!
}

extend type Query {
  adhocRunStatus(runId: String!, numEvents: Int!): JobStatus! @auth(permissions: [MANAGE_MONITORS])
  backfillRunStatus(runId: String!): BackfillJobStatus! @auth(permissions: [MANAGE_MONITORS])
  queryBackfillJobs(datasetId: String, onlyActive: Boolean, runId: String): [BackfillJobInfo!]! @auth(permissions: [MANAGE_MONITORS])
  monitorConfig(datasetId: String!): String @auth
  validateMonitorConfig(datasetId: String!, config: String!): Boolean @auth
  analyzer(datasetId: String!, analyzerId: String!): String @auth
  monitor(datasetId: String!, monitorId: String!): String @auth
  columnMonitors(datasetId: String!, columnId: String! tags: [SegmentTagFilter!]): [String]! @auth
  """
  Monitor coverage information for all datasets in the organization
  """
  monitorCoverage: [MonitorCoverage!] @auth(permissions: [VIEW_DATA])
}

extend type Model {
  """
  Monitor coverage information for the given dataset
  """
  monitoredCategories: [AlertCategory!] @auth(permissions: [VIEW_DATA])
}
