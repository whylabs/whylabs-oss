import { AssumeRoleRequest, Credentials } from '@aws-sdk/client-sts';
import { Configuration as DataServiceClientConfig } from '@whylabs/data-service-node-client';
import { Configuration as SongbirdClientConfig } from '@whylabs/songbird-node-client';
import { HttpsAgent } from 'agentkeepalive';

import { config } from '../../config';
import { sts } from '../../providers/aws';
import { fnThrow, notImplemented } from '../../util/misc';

const { stage } = config;
const { roleArn: songbirdRoleArn, endpoint: songbirdEndpoint } = config.songbird;
const { endpoint: dataServiceEndpoint } = config.dataService ?? {};

interface OpenAPIClientCredentials {
  credentials: string;
  expiration: number;
}

let cachedCredentials: OpenAPIClientCredentials;

const ROLE_DURATION_SECONDS = 15 * 60; // 15 minutes

const getOpenAPIClientCredentials = (roleArn: string) => async (): Promise<string> => {
  if (!cachedCredentials || Date.now() >= cachedCredentials.expiration) {
    const assumeRoleRequest: AssumeRoleRequest = {
      RoleArn: roleArn,
      RoleSessionName: `dashboard-service-${stage}`,
      DurationSeconds: ROLE_DURATION_SECONDS,
    };
    const assumeRoleResponse = await sts.assumeRole(assumeRoleRequest);

    // throw if there are no credentials, or the credentials object is missing any fields
    if (
      !assumeRoleResponse.Credentials ||
      Object.keys(assumeRoleResponse.Credentials).some(
        (key) => assumeRoleResponse.Credentials && assumeRoleResponse.Credentials[key as keyof Credentials] == null,
      )
    )
      throw new Error('Could not obtain credentials from STS');

    const { AccessKeyId, SecretAccessKey, SessionToken, Expiration } = assumeRoleResponse.Credentials;
    // expire credentials a minute before real expiration time to avoid creds expiring during api calls
    const expireTime = Expiration ? Expiration.valueOf() - 60 * 1000 : Date.now() + ROLE_DURATION_SECONDS * 1000;
    cachedCredentials = {
      credentials: JSON.stringify({ AccessKeyId, SecretAccessKey, SessionToken }),
      expiration: expireTime,
    };
  }

  return cachedCredentials.credentials;
};

export const getStandardOpenApiOptions = (): unknown => ({
  // The autogenerated OpenAPI client wants to set this to form urlencoded by default which causes OpenAPI server to return 403 ;_;
  headers: { 'Content-Type': 'application/json' },
  httpsAgent: new HttpsAgent({
    maxSockets: 64,
    maxFreeSockets: 64,
    keepAlive: true,
    freeSocketTimeout: 4_000, // kill free sockets after 4 seconds to avoid ECONNRESET exceptions. See readme for more info: https://github.com/node-modules/agentkeepalive#readme
    timeout: 59_000, // keep less than the ELB 60 seconds timeout
  }),
});

export enum OpenAPIClientKind {
  Songbird,
  DataService,
}

type ClientMap = {
  [OpenAPIClientKind.Songbird]: SongbirdClientConfig;
  [OpenAPIClientKind.DataService]: DataServiceClientConfig;
};

export const getOpenAPIClientConfig = (clientType: OpenAPIClientKind): ClientMap[typeof clientType] => {
  switch (clientType) {
    case OpenAPIClientKind.Songbird:
      return new SongbirdClientConfig({
        apiKey: getOpenAPIClientCredentials(
          songbirdRoleArn ??
            fnThrow(
              'No Songbird role arn specified in the current environment for this service. Was the relevant env var set?',
            ),
        ),
        basePath: songbirdEndpoint,
        baseOptions: getStandardOpenApiOptions(),
      });
    case OpenAPIClientKind.DataService:
      return new DataServiceClientConfig({
        apiKey: undefined, // currently there is no explicit auth
        basePath: dataServiceEndpoint,
        baseOptions: getStandardOpenApiOptions(),
      });
  }

  return notImplemented();
};
