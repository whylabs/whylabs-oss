/* tslint:disable */
/* eslint-disable */
/**
 * The file ./src/schemas/generated/llm-policies-schema.ts is generated by core-types-ts on behalf of typeconv, DO NOT EDIT.
 * For more information, see:
 *  - {@link https://github.com/grantila/core-types-ts}
 *  - {@link https://github.com/grantila/typeconv}
 */

export interface PoliciesJsonSchema {
    /** List of policy cards displayed on UI */
    policies: PolicyRuleSet[];
    configSelections: ConfigSelections;
}

/** Policy rule set card displayed on UI, with content and controls for LLM policy configurations management. */
export interface PolicyRuleSet {
    id: PolicyRuleID;
    /** The title of policy rule set card displayed on UI */
    title: string;
    /** The rule set type, can be prompt, response or both. */
    type: "prompt" | "response" | "prompt-and-response";
    /** The rule set icon, the string should be mapped in dashbird-ui to get the tabler icon component. e.g. 'alien' */
    icon: string;
    /** The policy rule's card description displayed on UI */
    description: string;
    /** The average of latency in milliseconds displayed on UI */
    latencyMilliseconds?: number;
    /** The policy rule's card UI controls */
    config: (SegmentedControl | CheckboxGroup)[];
}

/** Segmented control UI component definition */
export interface SegmentedControl {
    /** Configuration ID used to get resource's actual config value */
    id: string;
    /** The control title displayed on UI */
    title: string;
    /** The control description displayed on UI. Might contain string parameters '{s}' to be replaced by UI */
    description: string;
    /** The control tooltip (optional) displayed after the title on UI */
    tooltip?: string;
    type: "segmented-control";
    /** Segmented control options */
    options: SegmentedControlItem[];
}

/** Checkbox group UI component definition */
export interface CheckboxGroup {
    /** Configuration ID used to get resource's actual config value */
    id: string;
    /** The control title displayed on UI */
    title: string;
    /** The control description displayed on UI. Might contain string parameters '{s}' to be replaced by UI */
    description: string;
    /** The control tooltip (optional) displayed after the title on UI */
    tooltip?: string;
    type: "checkbox-group";
    /** Checkbox group options */
    options: CheckboxGroupItem[];
}

/** Enum of available policy rules */
export type PolicyRuleID = "bad-actors" | "misuse" | "cost" | "customer-experience" | "truthfulness";

/** Segmented control item definition */
export interface SegmentedControlItem {
    /** The text displayed on the item */
    label: string;
    /** The item value, used to save the resource configurations */
    value: string;
    /** The item (optional) icon, the string should be mapped in dashbird-ui to get the tabler icon component. e.g. 'alien' */
    icon?: string;
    /** The item color, currently need to be a valid Mantine's color */
    color?: string;
}

/** Checkbox item definition */
export interface CheckboxGroupItem {
    /** The text displayed on the item */
    label: string;
    /** The item value, used to save the resource configurations */
    value: string;
    /** The control tooltip (optional) displayed after the title on UI */
    tooltip?: string;
}

/** The list of policy rule set configurations for the UI card controls */
export interface ConfigSelections {
    /** The timestamp of last update */
    lastUpdatedTimestamp?: number;
    /** The current policy config version */
    policyVersion?: number;
    /** The author of last update */
    lastUpdatedAuthor?: string;
    /** List of policy rule sets with selected configurations */
    policies: PolicyConfigSelection[];
    /** YAML with callback settings */
    callbackSettings?: string;
    /** YAML with advanced settings */
    advancedSettings?: string;
}

/** Define the object expected to persist the policy rule set control's configuration */
export interface SegmentedControlSelectionValue {
    /** The policy rule set control's ID */
    id: string;
    type: "segmented-control";
    /** The policy rule set control's value */
    value: string;
}

/** Define the object expected to persist the policy rule set control's configuration */
export interface CheckboxGroupSelectionValue {
    /** The policy rule set control's ID */
    id: string;
    type: "checkbox-group";
    /** The policy rule set control's value */
    value: string[];
}

/** Configuration for the policy rule set card */
export interface PolicyConfigSelection {
    id: PolicyRuleID;
    /** Define if the policy rule set is enabled */
    enabled: boolean;
    /** Set of values persisted for the policy card configuration controls */
    params: (SegmentedControlSelectionValue | CheckboxGroupSelectionValue)[];
}
