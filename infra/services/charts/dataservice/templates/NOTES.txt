1. Get the application URL by running these commands:
{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" .Values.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "dataservice.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "dataservice.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "dataservice.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.service.port }}
{{- else if contains "ClusterIP" .Values.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "dataservice.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT
{{- end }}

2. Ensure the necessary secrets are created. Your application requires specific secrets to function properly:

   - Secret for API Key: `whylabs-{{ .Release.Name }}-api-key`
   - Secret for API Secret: `whylabs-{{ .Release.Name }}-api-secret`
   - Secret for pulling private image: `whylabs-{{ .Release.Name }}-registry-credentials`

   You can create these secrets with the following commands:
   ```
   kubectl create secret generic whylabs-{{ .Release.Name }}-api-key \
    --namespace {{ .Release.Namespace }} \
    --from-literal=WHYLABS_API_KEY='<your-api-key>' 
   
   kubectl create secret generic whylabs-{{ .Release.Name }}-api-secret \
    --namespace {{ .Release.Namespace }} \
    --from-literal=CONTAINER_PASSWORD='<your-api-secret>'
   
   kubectl create secret docker-registry whylabs-{{ .Release.Name }}-registry-credentials \
    --namespace {{ .Release.Namespace }} \
    --docker-server="registry.gitlab.com" \
    --docker-username="<whylabs-provided-username>" \
    --docker-password="<whylabs-provided-token>" \
    --docker-email="<whylabs-provided-email>"
   ```

   Replace `<your-api-key>` and other values with the actual values you need to use.

3. After creating the secrets, verify that they are correctly set up by running:

  ```
  kubectl get secrets --namespace {{ .Release.Namespace }}
  ```

